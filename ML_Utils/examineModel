import argparse
from stfs_pytoolbox.ML_Utils import *

import io

import math
import os
import sys


def parseArguments():
    parser = argparse.ArgumentParser("This scripts examines and prints a pyTorch model created by the stfs-pytoolbox ML_Utils!")

    parser.add_argument('model', type=str,
                        help='model to be examined')

    # parser.add_argument('-a', '--assembly', action='store_true',
    #                     help='Given model is an assembly model of FlexMLPs!')

    args = parser.parse_args()

    return args


def main():
    args = parseArguments()

    file = args.model

    # in case I want to add this option later on, to examine a torch script

    # # pyTorch saves device on which model was saved, therefore it has to be saved
    # if torch.cuda.is_available():
    #     device="cuda"
    # else:
    #     device="cpu"
    #
    # if args.assembly:
    #     checkpoint = torch.load(file, map_location=torch.device(device))
    #
    #     # Load ScriptModule from io.BytesIO object
    #     with open(file, 'rb') as f:
    #         buffer = io.BytesIO(f.read())
    #
    #     # Load all tensors onto CPU, using a device
    #     buffer.seek(0)
    #     model = torch.jit.load(buffer, map_location=torch.device(device))
    #
    #
    # else:

    model, features, labels, epochs, [featureScaler, labelScaler] = loadFlexMLPCheckpoint(file)

    print("\nModel definition of '{}'\n".format(file))
    print(model)
    print("")
    print("Features: {}".format(features))
    print("{0:>12s}".format("Minimum:"), '[', ', '.join(["{0:5.4e}".format(i) for i in featureScaler.data_min_]),
          ']')
    print("{0:>12s}".format("Maximum:"), '[', ', '.join(["{0:5.4e}".format(i) for i in featureScaler.data_max_]),
          ']')
    print("")
    print("Labels: {}".format(labels))
    print("{0:>12s}".format("Minimum:"), '[', ', '.join(["{0:5.4e}".format(i) for i in labelScaler.data_min_]),
          ']')
    print("{0:>12s}".format("Maximum:"), '[', ', '.join(["{0:5.4e}".format(i) for i in labelScaler.data_max_]),
          ']')


if __name__ == "__main__":
    main()