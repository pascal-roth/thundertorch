from stfs_pytoolbox.ML_Utils import *
import pandas as pd

import argparse
import os
import sys


def parseArguments():

    parser = argparse.ArgumentParser("This script takes an already trained FlexMLP model and uses it for transfer"
                                     " learning. Therefore it is used as a baseline to train for a different set of"
                                     " labels.")

    parser.add_argument('--model', '-m', dest='model', required=True,
                        help='PyTorch model to load from .pt file')
    parser.add_argument('-f', '--features', nargs='+',
                       help="Provide list of features extracted from training data"
                            " (default=features of loaded model are used)")
    parser.add_argument('-l', '--labels', nargs='+', required=True,
                       help="Provide list of labels extracted from training data")

    parser.add_argument('-d', '--training-data', type=str, dest='train_data', required=True,
                        help='File to load for training data. Valid extensions are .txt, .csv, .ulf, .h5'
                             ' Delimiter must be spaces"')
    parser.add_argument('-v', '--validation-data', type=str, dest='val_data',
                        help='File to load for validation data. Valid extensions are .txt, .csv, .ulf, .h5'
                             ' Delimiter must be spaces')
    parser.add_argument('-e', '--epochs', type=int, dest='epochs', default=10,
                        help='Number of epochs to train')
    parser.add_argument('-b', '--batch', type=int, dest='batch', default=16,
                        help='Batch size during training')
    parser.add_argument('-lr', '--learning-rate', type=float, dest='lr', default=1e-3,
                        help='Learning rate for optimizer')
    parser.add_argument('--output', '-o', dest='output', required=False, default='TorchModel.pt',
                        help='file name of best model that is saved')
    parser.add_argument('-p', '--plot', action='store_true', dest='plot',
                        help='Enables plotting of losses during training')
    args = parser.parse_args()

    return args


def main():
    args = parseArguments()

    # Handle arguments
    # training data
    file = args.train_data
    _, file_exention = os.path.splitext(file)

    print("Loading training data:")
    if file_exention == ".h5":
        store = pd.HDFStore(file)
        keys = store.keys()
        assert len(keys) == 1, "There must be only one key stored in pandas.HDFStore in '{}'!".format(file)
        df_train = store.get(keys[0])
        store.close()
    else:
        df_train = pd.read_csv(file, sep=" ")
    print("Done!")
    # validation data
    if args.val_data is not None:
        print("Loading validation data:")
        file = args.val_data
        _, file_exention = os.path.splitext(file)
        if file_exention == ".h5":
            store = pd.HDFStore(file)
            keys = store.keys()
            assert len(keys) == 1, "There must be only one key stored in pandas.HDFStore in '{}'!".format(file)
            df_val = store.get(keys[0])
            store.close()
        else:
            df_val = pd.read_csv(file, sep=" ")
        print("Done!")
    else:
        # run validation with training data
        df_val = df_train

    print("Loading FlexMLP model:")
    model, features, _, _, _ = loadFlexMLPCheckpoint(args.model)

    # overwrite features and labels
    labels = args.labels
    if args.features:
        features = args.features

    # Check if features and labels are in data
    for feature in features:
        if feature not in df_train.columns:
            print("Error: feature '{}' is not in training data: {}".format(feature, df_train.columns))
            sys.exit(1)
        if feature not in df_val.columns:
            print("Error: feature '{}' is not in validation data: {}".format(feature, df_val.columns))
            sys.exit(1)
    # Check if features and labels are in data
    for label in labels:
        if label not in df_train.columns:
            print("Error: feature '{}' is not in training data: {}".format(label, df_train.columns))
            sys.exit(1)
        if label not in df_val.columns:
            print("Error: feature '{}' is not in validation data: {}".format(label, df_val.columns))
            sys.exit(1)

    # Continue with training

    epochs = args.epochs
    batch = args.batch
    outputFile = args.output

    # run training
    model, loss, _ = trainFlexMLP(model, outputFile, features, labels, df_train, epochs=epochs, batch=batch, plot=args.plot, lr=args.lr)


if __name__ == "__main__":
    main()


